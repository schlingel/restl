package at.fundev.restl.service;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Resources;
import android.util.Log;

/**
 * 
 */
public class SettingProperties extends Properties {
	private static final String TAG = SettingProperties.class.getName();
	
	private static final long serialVersionUID = 6856828796766704061L;
	
	/**
	 * The name of the properties file which is used for configurations.
	 */
	public static final String PROPERTIES_NAME = "restl.config.properties";

	/**
	 * The default value for the maximum of the concurrent running worker threads.
	 */
	private static final int MAX_WORKER_THREADS = 5;
	
	/**
	 * Private constructor to guarantee that only valid values are inside a properties object.
	 */
	private SettingProperties() {
		super();
	}
	
	@Override
	public synchronized void load(InputStream in) throws IOException {
		super.load(in);
	}
	
	/**
	 * <p>Creates a new properties object. If there's a properties file the values are taken, if there isn't
	 * one default values are taken.</p>
	 * <h2>Default Values</h2>
	 * <table border="1">
	 * <tr>
	 * <td><b>Name</b></td>
	 * <td><b>Value<b></td>
	 * </tr>
	 * <tr>
	 * <td>Maximal concurrent running worker threads.</td>
	 * <td>5</td>
	 * </tr>
	 * </table>
	 * @param context
	 * @return
	 */
	public static SettingProperties from(Context context) {
		SettingProperties props = new SettingProperties();
		Resources res = context.getResources();
		AssetManager assetManager = res.getAssets();
		
		try {
			InputStream input = assetManager.open(PROPERTIES_NAME);
			props.load(input);
			Log.i(TAG, "Loaded configuration from " + PROPERTIES_NAME);
		} catch(IOException e) {
			Log.e(TAG, "Couldn't load configuration file");
		}
		
		return props;
	}
}
