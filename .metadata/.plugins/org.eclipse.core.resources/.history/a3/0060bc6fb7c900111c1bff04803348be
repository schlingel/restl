package at.fundev.restl.service;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import android.app.Service;
import android.content.Intent;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.IBinder;
import android.os.Message;
import android.os.PowerManager;
import at.fundev.restl.administration.RequestStatusHelper;
import at.fundev.restl.administration.Status;
import at.fundev.restl.request.Request;

/**
 * <p>A own implementation of a IntentService. This is used to be able to control how the job queue is processed. The service itself is written that way to enable multiple worker threads at once.</p>
 * <p>For details to the Request the service understands, check {@see Request}
 */
public class RestlHttpService extends Service implements Callback {
	/**
	 * The wake lock of the service. Used as long as there are requests which are processed.
	 */
	private static volatile PowerManager.WakeLock lock = null;
	
	/**
	 * Contains the jobs represented by intents.
	 */
	private Queue<Intent> jobQueue;
	
	/**
	 * Contains the list of all worker threads.
	 */
	private List<HttpFetcherThread> workerThreads;
	
	/**
	 * Contains a simple object which wraps the needed RequestStatusProvider operations.
	 */
	private RequestStatusHelper status;
	
	/**
	 * Sets the maximal count of the allowed worker threads.
	 */
	private int maxWorkerThreads;
	
	/**
	 * The looper for the restl service.
	 */
	private RestlLooper msgLooper;
	
	/**
	 * Do not use! This service is controllyed by sending intents like an intent service!
	 */
	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}
	
	/**
	 * This method handles every incoming request.
	 */
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		synchronized (jobQueue) {
			long id = intent.getExtras().getLong(Request.REQUEST_ID);
			status.setStatus(id, Status.Pending);
			jobQueue.offer(intent);			
		}
		
		process();
		
		// intents are stored internal and 
		return START_STICKY;
	}
	
	
	
	/**
	 * Checks if there are intents in the job queue and if there are, starts processing.
	 */
	private void process() {
		synchronized(jobQueue) {
			// if the service has no open jobs it exits
			if(jobQueue.isEmpty()) {
				stopSelf();
			} else {
				synchronized(workerThreads) {
					// a new worker thread is only started when the maximum is not reached yet.
					if(workerThreads.size() < maxWorkerThreads) {
						Intent curJob = jobQueue.poll();
						HttpFetcherThread worker = new HttpFetcherThread(msgLooper.getHandler(), curJob);
						workerThreads.add(worker);
						worker.start();
					}
				}
			}
		}
	}
	
	/**
	 * Initializes the service and all needed objects.
	 */
	@Override
	public void onCreate() {
		super.onCreate();
		SettingProperties props = SettingProperties.from(this);
		
		msgLooper = new RestlLooper(this);
		workerThreads = new ArrayList<Thread>();
		jobQueue = new LinkedList<Intent>();
		status = new RequestStatusHelper();
		maxWorkerThreads = props.getMaxWorkerThreads();
	}

	/**
	 * Here the result of a fetched website is stored.
	 */
	public boolean handleMessage(Message msg) {
		Intent resultIntent = msg.getData().getParcelable(HttpFetcherThread.RESULT_INTENT_KEY);
		sendBroadcast(resultIntent);
		
		process();
		
		return false;
	}	
}
