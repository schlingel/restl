package at.fundev.restl.service;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;

import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import at.fundev.restl.administration.RequestStatusHelper;
import at.fundev.restl.administration.Status;
import at.fundev.restl.processor.Producer;
import at.fundev.restl.request.HttpMethod;
import at.fundev.restl.request.Request;

/**
 * <p>The worker thread implementation. A worker thread just processes one request at a time. When it finished, it writes
 * the result to the disk if possible and notifies the service that it finished. After that it exits.</p>
 * <p>The service starts than the next thread if needed.</p>
 */
public class HttpFetcherThread extends Thread {
	private static final String TAG = HttpFetcherThread.class.getName();
	
	/**
	 * All parameter which shouldn't be included in the parameter call.
	 */
	private static final String[] NOT_FOR_NETWORK_REQUEST_PARAMS = {
		Request.CONTENT_TYPE,
		Request.HTTP_TYPE,
		Request.REQUEST_ID,
		Request.REQUEST_URL,
		Request.MIXED_CONTENT_NAME,
		Request.MIXED_CONTENT_NAME_IDENTIFIER,
		Request.REQUEST_ERROR,
		Request.REQUEST_ERROR_MESSAGE
	};
	
	/**
	 * Used to package the finished intent to the result. 
	 */
	public static final String RESULT_INTENT_KEY = "RESULT_INTENT_KEY";
	
	/**
	 * The service handler object. Needed to notify the service when the thread finishes.
	 */
	private Handler serviceHandler;
	
	/**
	 * The request intent. Contains all needed data like the target url.
	 */
	private Intent requestIntent;
	
	/**
	 * The status helper object to change the status of the received request.
	 */
	private RequestStatusHelper status;
	
	/**
	 * The request id of the request which is processed by this worker thread.
	 */
	private final long requestID;
	
	/**
	 * Initializes the worker thread. The handler is needed to notify the service when the request finishes, the intent contains
	 * all needed data for processing the request.
	 * @param serviceHandler
	 * @param requestIntent
	 */
	public HttpFetcherThread(Handler serviceHandler, Intent requestIntent) {
		this.serviceHandler = serviceHandler;
		this.requestIntent = requestIntent;
		this.requestID = requestIntent.getExtras().getLong(Request.REQUEST_ID);
	}
	
	/**
	 * Gets the ID of the process which is processed by this request.
	 * @return
	 */
	public long getRequestID() {
		return requestID;
	}
	
	/**
	 * <p>Excutes the request if possible. To start the network communication the target url and the request ID is required.</p>
	 * <p>When the URL is in the intent extras, the thread does the following things:</p>
	 * <ol>
	 * <li>Sets the status of the request to <i>processing</i>.</li>
	 * <li>Opens the URLConnection and tries to fetch the data.</li>
	 * <li>Sets the status of the request to finished if the call <i>succeeded</i> (HTTP errors are currently not handled.), to <i>error</i> otherwise.</li>
	 * </ol>
	 */
	@Override
	public void run() {
		long id = requestIntent.getExtras().getLong(Request.REQUEST_ID);
		Message result = new Message();
		
		if(isIntentValid()) {
			status.setStatus(id, Status.Processing);
			result = fetchRequestAndAppendResult(id, result);
		} else {
			result = setAsErrorMessage(id, result, "Request intent is not valid!", null);
		}
		
		serviceHandler.handleMessage(result);
	}
	
	/**
	 * <p>Tries to execute the request and appends the result. If it succeeds the status
	 * in the DB is set to Finished, otherwise to Error.</p>
	 * @param msg
	 * @return
	 */
	private Message fetchRequestAndAppendResult(long requestID, Message msg) {
		Producer producer = getRequestProcessor();
		
		if(producer != null) {
			
		} else {
			msg = setAsErrorMessage(requestID, msg, "Couldn't instant class for producer", null);
		}
		
		return msg;
	}
	
	private InputStream executeNetworkRequest() throws IOException {
		HttpURLConnection connection = getConnection();

		
		
		
		
		return null;
	}
	
	/**
	 * Creates a default HttpURLConnection before appending request parameter.
	 * @return
	 */
	private HttpURLConnection getConnection() throws IOException {
		String sUrl = requestIntent.getExtras().getString(Request.REQUEST_URL);
		String paramContentType = requestIntent.getExtras().getString(Request.CONTENT_TYPE);
		
		URL host = new URL(sUrl);
		HttpURLConnection connection = (HttpURLConnection)host.openConnection();
			
		connection.setDoInput(true);
		connection.setDoOutput(true);
		connection.setRequestProperty(Request.CONTENT_TYPE, paramContentType == null ? "application/json;charset=utf-8" : paramContentType);
		connection.setRequestMethod(getHttpMethodFrom());		
		
		return connection;
	}
	
	/**
	 * Returns the set http method of the request intent.
	 * @return
	 */
	private String getHttpMethodFrom() {
		if(requestIntent == null) {
			return HttpMethod.toString(null);
		} else {
			return HttpMethod.toString(HttpMethod.fromNumeric(requestIntent.getExtras().getInt(Request.HTTP_TYPE)));
		}
	}
	
	/**
	 * Returns the parameters as one string for the connection.
	 * @return
	 */
	private String getParameterString() {
		StringBuffer buffer = new StringBuffer();
		
		for(String name : requestIntent.getExtras().keySet()) {
			if(shouldIncludeParameter(name)) {
				buffer.append(String.format("%s=%s",
						));
			}
		}
		
		if(buffer.length() > 0) {
			buffer.replace(buffer.length() - 1, buffer.length(), "");
		}
		
		return buffer.toString();
	}
	
	/**
	 * Checks if the given name is for the network parameters.
	 * @param name
	 * @return
	 */
	private boolean shouldIncludeParameter(String name) {
		if(name.toLowerCase().startsWith(Request.PRODUCER_PREFIX)) {
			return false;
		}
		
		for(String notForRequest : NOT_FOR_NETWORK_REQUEST_PARAMS) {
			if(notForRequest.equalsIgnoreCase(name)) {
				return false;
			}
		}
		
		return true;
	}
	
	/**
	 * Tries to instance the request processor and returns it. If it can't or the given type isn't a 
	 * producer the method returns null.
	 * @return 
	 */
	private Producer getRequestProcessor() {
		Class<?> clazz = (Class<?>)requestIntent.getExtras().getSerializable(Request.REQUEST_CLASS);
		
		try {
			Object objProvider = clazz.newInstance();
			
			if(objProvider instanceof Producer) {
				return (Producer)objProvider;
			} else {
				Log.e(TAG, "Couldn't use given producer " + clazz.getName() + ", because it doesn't implement the Producer interface!");
			}
			
			return objProvider instanceof Producer ? (Producer)objProvider : null;
		} catch (IllegalAccessException e) {
			Log.e(TAG, e.getMessage(), e);
		} catch (InstantiationException e) {
			Log.e(TAG, e.getMessage(), e);
		}
		
		return null;
	}
	
	/**
	 * <p>Creates an error message. An error message contains three properties:</p>
	 * <ul>
	 * <li>Request ID</li>
	 * <li>Error Message</li>
	 * <li>Error Exception</li>
	 * </ul>
	 * @param requestID
	 * @param msg
	 * @return
	 */
	private Message setAsErrorMessage(long requestID, Message msg, String errMsg, Exception exc) {
		status.setStatus(requestID, Status.Error);
		
		msg.getData().putLong(Request.REQUEST_ID, requestID);
		msg.getData().putString(Request.REQUEST_ERROR_MESSAGE, errMsg);
		msg.getData().putSerializable(Request.REQUEST_ERROR, exc);
		
		return msg;
	}
	
	/**
	 * Checks if the intent contains the request ID and the target url.
	 * @return
	 */
	private boolean isIntentValid() {
		return (requestIntent != null) &&
				requestIntent.getExtras().containsKey(Request.REQUEST_ID) &&
				requestIntent.getExtras().containsKey(Request.REQUEST_URL);
	}
}
